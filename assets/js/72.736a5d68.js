(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{352:function(s,t,a){"use strict";a.r(t);var e=a(8),r=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"shell-脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell-脚本"}},[s._v("#")]),s._v(" Shell 脚本")]),s._v(" "),t("p",[s._v("一点点追加。")]),s._v(" "),t("h2",{attrs:{id:"bash-变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bash-变量"}},[s._v("#")]),s._v(" Bash 变量")]),s._v(" "),t("p",[s._v("Bash 变量分为：环境变量和自定义变量。")]),s._v(" "),t("h3",{attrs:{id:"环境变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境变量"}},[s._v("#")]),s._v(" 环境变量")]),s._v(" "),t("p",[s._v("环境变量是 Bash 环境自带的变量，进入 Shell 时已经定义好了，它们通常时系统定义好的，也可以由用户从父 Shell 传入子 Shell。")]),s._v(" "),t("h3",{attrs:{id:"自定义变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义变量"}},[s._v("#")]),s._v(" 自定义变量")]),s._v(" "),t("p",[s._v("自定义变量是用户在当前 Shell 里自己定义的变量，仅在当前 Shell 可用。一旦退出 Shell，该变量就不存在了。")]),s._v(" "),t("h3",{attrs:{id:"特殊变量-脚本内"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特殊变量-脚本内"}},[s._v("#")]),s._v(" 特殊变量 - 脚本内")]),s._v(" "),t("p",[s._v("脚本文件内部可以使用特殊变量：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("$0")]),s._v("：脚本文件名，即 "),t("code",[s._v("script.sh")])]),s._v(" "),t("li",[t("code",[s._v("$1~$9")]),s._v("：对应脚本的第一个参数到第九个参数")]),s._v(" "),t("li",[t("code",[s._v("$#")]),s._v("：参数的总数")]),s._v(" "),t("li",[t("code",[s._v("$@")]),s._v("：全部的参数，参数之间使用空格分隔")])]),s._v(" "),t("p",[s._v("解析一个示例：")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("dir")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("$(")]),s._v("dirname $0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意等号两边不要有空格")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# $0 => 即脚本文件名（包含你进入的目录）./shells/echo.sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# $(dirname $0) => 输出文件目录，包裹住使得不会被 `echo` 解析成两部分 ./shells")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 完成的 => 进入目录，并获取其完整路径 /home/shanyuhai/code/shells")]),s._v("\n")])])]),t("h2",{attrs:{id:"条件语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#条件语句"}},[s._v("#")]),s._v(" 条件语句")]),s._v(" "),t("h3",{attrs:{id:"if"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if"}},[s._v("#")]),s._v(" if")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" expression "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n   Statement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" to be executed "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" expression is "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if expr1 ?then? body1 elseif expr2 ?then? body2 elseif ... ?else? ?bodyN?")]),s._v("\n")])])]),t("p",[t("code",[s._v("then")]),s._v(" 语句中为常规执行语句，而 "),t("code",[s._v("expression")]),s._v(" 判断表达式提供了一些快捷判断。")]),s._v(" "),t("h4",{attrs:{id:"_1-文件判断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-文件判断"}},[s._v("#")]),s._v(" 1. 文件判断")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("[ -a file ]")]),s._v("：如果 "),t("code",[s._v("file")]),s._v(" 存在，则为 true")]),s._v(" "),t("li",[t("code",[s._v("[ -d file ]")]),s._v("：如果 "),t("code",[s._v("file")]),s._v(" 存在且是一个目录，则为 true")]),s._v(" "),t("li",[t("code",[s._v("[ -f file ]")]),s._v("：如果 "),t("code",[s._v("file")]),s._v(" 存在且是一个普通文件，则为 true")])]),s._v(" "),t("h4",{attrs:{id:"_2-字符串判断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-字符串判断"}},[s._v("#")]),s._v(" 2. 字符串判断")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("[ -n string ]")]),s._v("：如果字符串 "),t("code",[s._v("string")]),s._v(" 长度大于 0，则为 true")]),s._v(" "),t("li",[t("code",[s._v("[ -z string ]")]),s._v("：如果字符串 "),t("code",[s._v("string")]),s._v(" 长度为 0，则为 true")])])])}),[],!1,null,null,null);t.default=r.exports}}]);